#version: '3.9'

services:
  postgres:
    image: postgres:15-alpine
    container_name: app_postgres
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppassword
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d userdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      com.datadoghq.ad.check_names: '["postgres"]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: |
        [{
          "host": "%%host%%",
          "dbm": true,
          "port": "5432",
          "username": "appuser",
          "password": "apppassword",
          "dbname": "userdb"
        }]

  redis:
    image: redis:alpine
    container_name: app_redis
    ports:
      - "6379:6379"
    networks:
      - app-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      com.datadoghq.ad.check_names: '["redisdb"]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"host": "%%host%%", "port": "6379"}]'

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: app_backend
    environment:
      DATABASE_URL: postgresql://appuser:apppassword@postgres:5432/userdb
      REDIS_URL: redis://redis:6379/0
      CACHE_EXPIRE_SECONDS: 300
      LOG_LEVEL: INFO
      DD_SERVICE: backend-api
      DD_ENV: dev
      DD_VERSION: 1.0.0
      DD_APM_ENABLED: true
      DD_AGENT_HOST: datadog-agent
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: app_frontend
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - LOG_LEVEL=INFO

  node-js:
    build:
      context: ./node-js
      dockerfile: Dockerfile
    container_name: app_node_js
    environment:
      API_URL: http://backend:8000
      LOG_LEVEL: INFO
      DD_SERVICE: nodejs-app
      DD_ENV: dev
      DD_VERSION: 1.0.0
      DD_APM_ENABLED: true
      DD_AGENT_HOST: datadog-agent
    ports:
      - "8080:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network


  datadog-agent:
    image: datadog/agent:latest
    container_name: datadog-agent
    env_file:
      - ./.env
    environment:
      - DD_ENV=dev
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_AGENT_HOST=datadog-agent
      # - DD_PROCESS_AGENT_ENABLED=true
      # - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
      # - DD_LOGS_ENABLED=true
      # - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
    ports:
      - "8126:8126/udp"  # APM
      - "8125:8125/udp"  # DogStatsD
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - app-network

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    environment:
    - REDIS_HOSTS=local:redis:6379
    ports:
    - "9090:8081"
    depends_on:
      - redis
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_LISTEN_PORT: 5050
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: 'False'
      PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: '10'
    ports:
      - "5050:5050"
    volumes:
      - ./database/servers.json:/pgadmin4/servers.json
      - ./database/passfile:/pgadmin4/passfile
    depends_on:
      - postgres
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge


# https://myops.medium.com/monitor-your-server-and-docker-containers-with-datadog-for-free-317b553c8530